<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/EVDataStore.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/EVDataStore</TokenIdentifier>
			<Abstract type="html">An Everlive framework object that is the local abstraction of the store in Everlive cloud.</Abstract>
			<DeclaredIn>EVDataStore.h</DeclaredIn>
			
			<NodeRef refid="1"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/EVDataStore/sharedInstance</TokenIdentifier>
			<Abstract type="html">Returns the shared instance of the local data store.</Abstract>
			<DeclaredIn>EVDataStore.h</DeclaredIn>			
			
			<Declaration>+ (id)sharedInstance</Declaration>
			
			
			<Anchor>//api/name/sharedInstance</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/EVDataStore/fetch:uniqueId:block:</TokenIdentifier>
			<Abstract type="html">Retrieves the EVObject with the specified id in background.</Abstract>
			<DeclaredIn>EVDataStore.h</DeclaredIn>			
			
			<Declaration>- (void)fetch:(Class)aClass uniqueId:(NSString *)uniqueId block:(EVObjectFetchResultBlock)block</Declaration>
			<Parameters>
				<Parameter>
					<Name>aClass</Name>
					<Abstract type="html">The EVObject type to retreive.</Abstract>
				</Parameter><Parameter>
					<Name>uniqueId</Name>
					<Abstract type="html">The id of the item</Abstract>
				</Parameter><Parameter>
					<Name>block</Name>
					<Abstract type="html">The block to execute. The block should have the following argument signature: (BOOL success, NSError *error)</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/fetch:uniqueId:block:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/EVDataStore/fetch:uniqueId:target:selector:</TokenIdentifier>
			<Abstract type="html">Retrieves the EVObject with the specified id in background</Abstract>
			<DeclaredIn>EVDataStore.h</DeclaredIn>			
			
			<Declaration>- (void)fetch:(Class)aClass uniqueId:(NSString *)uniqueId target:(id)target selector:(SEL)selector</Declaration>
			<Parameters>
				<Parameter>
					<Name>aClass</Name>
					<Abstract type="html">The EVObject type to retrieve</Abstract>
				</Parameter><Parameter>
					<Name>uniqueId</Name>
					<Abstract type="html">The id of the item</Abstract>
				</Parameter><Parameter>
					<Name>target</Name>
					<Abstract type="html">The object to call selector on.</Abstract>
				</Parameter><Parameter>
					<Name>selector</Name>
					<Abstract type="html">The selector to call. It should have the following signature: (void)requestCompletedWithResult:(NSArray)result error:(NSError)error. error will be nill on success.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/fetch:uniqueId:target:selector:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/EVDataStore/fetchAll:block:</TokenIdentifier>
			<Abstract type="html">Retrieves all the EVObject in background.</Abstract>
			<DeclaredIn>EVDataStore.h</DeclaredIn>			
			
			<Declaration>- (void)fetchAll:(Class)aClass block:(EVObjectFetchResultBlock)block</Declaration>
			<Parameters>
				<Parameter>
					<Name>aClass</Name>
					<Abstract type="html">The EVObject type to retreive.</Abstract>
				</Parameter><Parameter>
					<Name>block</Name>
					<Abstract type="html">The block to execute. The block should have the following argument signature: (BOOL success, NSError *error)</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/fetchAll:block:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/EVDataStore/fetchAll:target:selector:</TokenIdentifier>
			<Abstract type="html">Retrieves all the EVObject in background.</Abstract>
			<DeclaredIn>EVDataStore.h</DeclaredIn>			
			
			<Declaration>- (void)fetchAll:(Class)aClass target:(id)target selector:(SEL)selector</Declaration>
			<Parameters>
				<Parameter>
					<Name>aClass</Name>
					<Abstract type="html">The EVObject type to retreive.</Abstract>
				</Parameter><Parameter>
					<Name>target</Name>
					<Abstract type="html">The object to call selector on.</Abstract>
				</Parameter><Parameter>
					<Name>selector</Name>
					<Abstract type="html">The selector to call. It should have the following signature: (void)requestCompletedWithResult:(NSArray)result error:(NSError)error. error will be nill on success.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/fetchAll:target:selector:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/EVDataStore/create:block:</TokenIdentifier>
			<Abstract type="html">Creates a new EVObject in background.</Abstract>
			<DeclaredIn>EVDataStore.h</DeclaredIn>			
			
			<Declaration>- (void)create:(id)object block:(EVObjectResultBlock)block</Declaration>
			<Parameters>
				<Parameter>
					<Name>object</Name>
					<Abstract type="html">The object to be created.</Abstract>
				</Parameter><Parameter>
					<Name>block</Name>
					<Abstract type="html">The block to execute. The block should have the following argument signature: (BOOL success, NSError *error)</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/create:block:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/EVDataStore/create:target:selector:</TokenIdentifier>
			<Abstract type="html">Saves a new EVObject in background.</Abstract>
			<DeclaredIn>EVDataStore.h</DeclaredIn>			
			
			<Declaration>- (void)create:(id)object target:(id)target selector:(SEL)selector</Declaration>
			<Parameters>
				<Parameter>
					<Name>object</Name>
					<Abstract type="html">The object instance to be created in everlive.</Abstract>
				</Parameter><Parameter>
					<Name>target</Name>
					<Abstract type="html">The object to call selector on.</Abstract>
				</Parameter><Parameter>
					<Name>selector</Name>
					<Abstract type="html">The selector to call. It should have the following signature: (void)requestCompletedWithResult:(id)result error:(NSError*)error. error will be nill on success.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/create:target:selector:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/EVDataStore/update:block:</TokenIdentifier>
			<Abstract type="html">updates the EVObject in background.</Abstract>
			<DeclaredIn>EVDataStore.h</DeclaredIn>			
			
			<Declaration>- (void)update:(id)object block:(EVObjectResultBlock)block</Declaration>
			<Parameters>
				<Parameter>
					<Name>object</Name>
					<Abstract type="html">The object instance to be updated in everlive.</Abstract>
				</Parameter><Parameter>
					<Name>block</Name>
					<Abstract type="html">The block to execute. The block should have the following argument signature: (BOOL success, NSError *error)</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/update:block:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/EVDataStore/update:target:selector:</TokenIdentifier>
			<Abstract type="html">updates the EVObject in background.</Abstract>
			<DeclaredIn>EVDataStore.h</DeclaredIn>			
			
			<Declaration>- (void)update:(id)object target:(id)target selector:(SEL)selector</Declaration>
			<Parameters>
				<Parameter>
					<Name>object</Name>
					<Abstract type="html">The object instance to be updated in everlive.</Abstract>
				</Parameter><Parameter>
					<Name>target</Name>
					<Abstract type="html">The object to call selector on.</Abstract>
				</Parameter><Parameter>
					<Name>selector</Name>
					<Abstract type="html">The selector to call. It should have the following signature: (void)requestCompletedWithResult:(BOOL)success error:(NSError*)error. error will be nill on success.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/update:target:selector:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/EVDataStore/update:withPredicate:block:</TokenIdentifier>
			<Abstract type="html">updates the EVObject in background.</Abstract>
			<DeclaredIn>EVDataStore.h</DeclaredIn>			
			
			<Declaration>- (void)update:(id)object withPredicate:(NSPredicate *)predicate block:(EVObjectResultBlock)block</Declaration>
			<Parameters>
				<Parameter>
					<Name>object</Name>
					<Abstract type="html">The object instance to be updated in everlive.</Abstract>
				</Parameter><Parameter>
					<Name>predicate</Name>
					<Abstract type="html">The filers to be applied</Abstract>
				</Parameter><Parameter>
					<Name>block</Name>
					<Abstract type="html">The block to execute. The block should have the following argument signature: (BOOL success, NSError *error)</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/update:withPredicate:block:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/EVDataStore/remove:block:</TokenIdentifier>
			<Abstract type="html">Removes the EVObject in background.</Abstract>
			<DeclaredIn>EVDataStore.h</DeclaredIn>			
			
			<Declaration>- (void)remove:(id)object block:(EVObjectResultBlock)block</Declaration>
			<Parameters>
				<Parameter>
					<Name>object</Name>
					<Abstract type="html">The object to be deleted.</Abstract>
				</Parameter><Parameter>
					<Name>block</Name>
					<Abstract type="html">The block to execute. The block should have the following argument signature: (BOOL success, NSError *error)</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/remove:block:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/EVDataStore/remove:target:selector:</TokenIdentifier>
			<Abstract type="html">Removes the EVObject in background.</Abstract>
			<DeclaredIn>EVDataStore.h</DeclaredIn>			
			
			<Declaration>- (void)remove:(id)object target:(id)target selector:(SEL)selector</Declaration>
			<Parameters>
				<Parameter>
					<Name>object</Name>
					<Abstract type="html">The object instance to be removed from everlive.</Abstract>
				</Parameter><Parameter>
					<Name>target</Name>
					<Abstract type="html">The object to call selector on.</Abstract>
				</Parameter><Parameter>
					<Name>selector</Name>
					<Abstract type="html">The selector to call. It should have the following signature: (void)requestCompletedWithResult:(BOOL)success error:(NSError*)error. error will be nill on success.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/remove:target:selector:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/EVDataStore/remove:withPredicate:block:</TokenIdentifier>
			<Abstract type="html">Removes the EVObject in background.</Abstract>
			<DeclaredIn>EVDataStore.h</DeclaredIn>			
			
			<Declaration>- (void)remove:(Class)aClass withPredicate:(NSPredicate *)predicate block:(EVObjectResultBlock)block</Declaration>
			<Parameters>
				<Parameter>
					<Name>aClass</Name>
					<Abstract type="html">The EVObject type.</Abstract>
				</Parameter><Parameter>
					<Name>predicate</Name>
					<Abstract type="html">The filers to be applied.</Abstract>
				</Parameter><Parameter>
					<Name>block</Name>
					<Abstract type="html">The block to execute. The block should have the following argument signature:(void)requestCompletedWithResult(BOOL success, NSError *error)</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/remove:withPredicate:block:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/EVDataStore/executeFetchRequest:block:</TokenIdentifier>
			<Abstract type="html">Retrieves an array of objects that meet the criteria specified by a given fetch request.</Abstract>
			<DeclaredIn>EVDataStore.h</DeclaredIn>			
			
			<Declaration>- (void)executeFetchRequest:(EVFetchRequest *)request block:(EVObjectFetchResultBlock)block</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A fetch request that specifies the search criteria for the fetch.</Abstract>
				</Parameter><Parameter>
					<Name>block</Name>
					<Abstract type="html">The block to execute. The block should have the following argument signature: (NSArray result, NSError error)</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/executeFetchRequest:block:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/EVDataStore/executeFetchRequest:target:selector:</TokenIdentifier>
			<Abstract type="html">Retrieves an array of objects that meet the criteria specified by a given fetch request.</Abstract>
			<DeclaredIn>EVDataStore.h</DeclaredIn>			
			
			<Declaration>- (void)executeFetchRequest:(EVFetchRequest *)request target:(id)target selector:(SEL)selector</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A fetch request that specifies the search criteria for the fetch.</Abstract>
				</Parameter><Parameter>
					<Name>target</Name>
					<Abstract type="html">The object to call selector on.</Abstract>
				</Parameter><Parameter>
					<Name>selector</Name>
					<Abstract type="html">The selector to call. It should have the following signature: (void)requestCompletedWithResult:(NSArray)result error:(NSError)error. error will be nill on success.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/executeFetchRequest:target:selector:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/EVDataStore/countForFetchRequest:block:</TokenIdentifier>
			<Abstract type="html">Retrieves the count of objects that meet the criteria specified by a given fetch request.</Abstract>
			<DeclaredIn>EVDataStore.h</DeclaredIn>			
			
			<Declaration>- (void)countForFetchRequest:(EVFetchRequest *)request block:(EVScalarResultBlock)block</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A fetch request that specifies the search criteria for the fetch.</Abstract>
				</Parameter><Parameter>
					<Name>block</Name>
					<Abstract type="html">The block to execute. The block should have the following argument signature: (NSUInteger result, NSError *error)</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/countForFetchRequest:block:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/EVDataStore/countForFetchRequest:target:selector:</TokenIdentifier>
			<Abstract type="html">Retrieves the count of objects that meet the criteria specified by a given fetch request.</Abstract>
			<DeclaredIn>EVDataStore.h</DeclaredIn>			
			
			<Declaration>- (void)countForFetchRequest:(EVFetchRequest *)request target:(id)target selector:(SEL)selector</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A fetch request that specifies the search criteria for the fetch.</Abstract>
				</Parameter><Parameter>
					<Name>target</Name>
					<Abstract type="html">The object to call selector on.</Abstract>
				</Parameter><Parameter>
					<Name>selector</Name>
					<Abstract type="html">The selector to call. It should have the following signature: (void)requestCompletedWithResult:(NSUInteger)result error:(NSError*)error. error will be nill on success.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/countForFetchRequest:target:selector:</Anchor>
		</Token>
		
	</File>
</Tokens>